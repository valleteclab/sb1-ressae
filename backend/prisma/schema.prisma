generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(USER)
  position  Position @relation(fields: [positionId], references: [id])
  positionId String
  department Department @relation(fields: [departmentId], references: [id])
  departmentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  demandsRequested     Demand[]  @relation("Requester")
  demandsSupervised    Demand[]  @relation("Supervisor")
  departmentsManaged   Department[] @relation("DepartmentManager")
  approvals           DemandApproval[]
  notifications       Notification[]

  @@map("users")
}

model Position {
  id          String   @id @default(uuid())
  name        String
  code        String   @unique
  description String
  status      Status   @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]

  @@map("positions")
}

model Department {
  id          String   @id @default(uuid())
  name        String
  description String
  manager     User     @relation("DepartmentManager", fields: [managerId], references: [id])
  managerId   String
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
  demands     Demand[]

  @@map("departments")
}

model Organization {
  id          String   @id @default(uuid())
  name        String
  code        String   @unique
  type        OrgType
  street      String
  number      String
  complement  String?
  neighborhood String
  city        String
  state       String
  zipCode     String
  phone       String
  email       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  departments Department[]

  @@map("organizations")
}

model Demand {
  id          String   @id @default(uuid())
  department  Department @relation(fields: [departmentId], references: [id])
  departmentId String
  requester   User     @relation("Requester", fields: [requesterId], references: [id])
  requesterId String
  type        DemandType
  object      String
  description String
  items       DemandItem[]
  estimatedValue Decimal
  justification String
  quantityJustification String
  priority    Priority
  deliveryLocation String
  deliveryDeadline DateTime
  supervisor  User     @relation("Supervisor", fields: [supervisorId], references: [id])
  supervisorId String
  status      DemandStatus @default(DRAFT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  approvals   DemandApproval[]
  logs        DemandLog[]

  @@map("demands")
}

model DemandItem {
  id          String   @id @default(uuid())
  demand      Demand   @relation(fields: [demandId], references: [id])
  demandId    String
  description String
  unit        String
  quantity    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("demand_items")
}

model DemandApproval {
  id          String   @id @default(uuid())
  demand      Demand   @relation(fields: [demandId], references: [id])
  demandId    String
  approver    User     @relation(fields: [approverId], references: [id])
  approverId  String
  status      ApprovalStatus
  comments    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("demand_approvals")
}

model DemandLog {
  id          String   @id @default(uuid())
  demand      Demand   @relation(fields: [demandId], references: [id])
  demandId    String
  action      LogAction
  description String
  createdAt   DateTime @default(now())

  @@map("demand_logs")
}

model Notification {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  title       String
  message     String
  type        NotificationType
  read        Boolean  @default(false)
  link        String?
  createdAt   DateTime @default(now())

  @@map("notifications")
}

enum Role {
  ADMIN
  MANAGER
  USER
  AUDITOR
}

enum Status {
  ACTIVE
  INACTIVE
}

enum OrgType {
  FEDERAL
  STATE
  MUNICIPAL
}

enum DemandType {
  ACQUISITION
  SERVICE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum DemandStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  REJECTED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum LogAction {
  CREATED
  UPDATED
  APPROVED
  REJECTED
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}